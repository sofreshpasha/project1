// app.js
// StarsFabrica ‚Äî Telegram bot + Express + SBP + Autodelivery via Fragment
// (c) 2025

import 'dotenv/config';
import express from 'express';
import { Telegraf, Markup } from 'telegraf';
import Database from 'better-sqlite3';
import dayjs from 'dayjs';
import { v4 as uuid } from 'uuid';
import path from 'path';
import { fileURLToPath } from 'url';

// === Fragment provider (Playwright) ===
import { deliverViaFragment } from './providers/fragment.js';

// === Paths / init ===
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const PORT = Number(process.env.PORT || 3000);
const RUB_PER_STAR = Number(process.env.RUB_PER_STAR || 1.8);
const AUTODELIVER = String(process.env.AUTODELIVER || '1') === '1';

const PUBLIC_BASE = (process.env.PUBLIC_BASE || '').replace(/\/$/, '');
const QRM_BASE = (process.env.QRM_BASE || '').replace(/\/$/, '');
const QRM_TOKEN = process.env.QRM_TOKEN || '';

const WEBHOOK_SECRET_RUB = process.env.WEBHOOK_SECRET_RUB || '';
const WEBHOOK_SECRET_CRYPTO = process.env.WEBHOOK_SECRET_CRYPTO || '';

const BOT_TOKEN = process.env.BOT_TOKEN;
const ADMIN_CHAT_ID = process.env.ADMIN_CHAT_ID;

if (!BOT_TOKEN) {
  console.error('BOT_TOKEN is required');
  process.exit(1);
}
if (!PUBLIC_BASE) {
  console.error('PUBLIC_BASE is required (external https url for webhooks)');
  process.exit(1);
}

// === DB ===
const dbDir = path.join(__dirname, 'db');
const dbPath = path.join(dbDir, 'starfall.sqlite');
await (async () => {
  await import('node:fs/promises')
    .then(fs => fs.mkdir(dbDir, { recursive: true }))
    .catch(() => {});
})();
const db = new Database(dbPath);

db.exec(`
CREATE TABLE IF NOT EXISTS orders (
  id TEXT PRIMARY KEY,
  user_id TEXT,
  username TEXT,
  gift_to TEXT,
  stars INTEGER NOT NULL,
  amount_rub REAL NOT NULL,
  payment_provider TEXT,
  payment_id TEXT,
  status TEXT NOT NULL DEFAULT 'new',  -- new|pending|paid|delivering|delivered|failed|cancelled
  tx_id TEXT,
  retries INTEGER NOT NULL DEFAULT 0,
  created_at TEXT NOT NULL,
  updated_at TEXT NOT NULL
);

CREATE INDEX IF NOT EXISTS idx_orders_status ON orders(status);
`);

const insOrder = db.prepare(`
  INSERT INTO orders (id, user_id, username, gift_to, stars, amount_rub, payment_provider, payment_id, status, created_at, updated_at)
  VALUES (@id, @user_id, @username, @gift_to, @stars, @amount_rub, @payment_provider, @payment_id, @status, @created_at, @updated_at)
`);

const updStatus = db.prepare(`
  UPDATE orders SET status=@status, updated_at=@updated_at WHERE id=@id
`);
const setPaid = db.prepare(`
  UPDATE orders SET status='paid', tx_id=@tx_id, updated_at=@updated_at WHERE id=@id
`);
const setDelivering = db.prepare(`
  UPDATE orders SET status='delivering', retries=retries+1, updated_at=@updated_at WHERE id=@id
`);
const setDelivered = db.prepare(`
  UPDATE orders SET status='delivered', tx_id=@tx_id, updated_at=@updated_at WHERE id=@id
`);
const setFailed = db.prepare(`
  UPDATE orders SET status='failed', updated_at=@updated_at WHERE id=@id
`);
const findById = db.prepare(`SELECT * FROM orders WHERE id=?`);
const nextPaidForDelivery = db.prepare(`
  SELECT * FROM orders
  WHERE status='paid' OR (status='delivering' AND retries<5)
  ORDER BY updated_at ASC
  LIMIT 1
`);

// === Helpers ===
const now = () => dayjs().toISOString();
const calcAmountRub = (stars) => Math.round(stars * RUB_PER_STAR * 100) / 100;

function signOk(req, secret) {
  if (!secret) return false;
  const header = req.get('X-Sign') || '';
  return header === secret; // —É–ø—Ä–æ—â—ë–Ω–Ω–æ, –±–µ–∑ HMAC, –ø–æ —Ç–≤–æ–µ–π —Ç–µ–∫—É—â–µ–π –ª–æ–≥–∏–∫–µ
}

async function createSbpInvoice(orderId, amountRub) {
  // –°–æ–∑–¥–∞–Ω–∏–µ QR/–∏–Ω–≤–æ–π—Å–∞ –≤ QRManager
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: notification_url –¥–æ–ª–∂–µ–Ω —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞—à –≤–µ–±—Ö—É–∫.
  const url = `${QRM_BASE}/api/invoice/create`;
  const body = {
    amount: amountRub,
    currency: 'RUB',
    order_id: orderId,
    notification_url: `${PUBLIC_BASE}/webhook/sbp`,
    description: `StarsFabrica #${orderId}`
  };

  const res = await fetch(url, {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${QRM_TOKEN}`,
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(body)
  });

  if (!res.ok) {
    const text = await res.text().catch(()=> '');
    throw new Error(`QRManager create failed: ${res.status} ${text}`);
  }
  const data = await res.json();
  // –æ–∂–∏–¥–∞–µ–º { invoice_id, pay_url, qr_base64, ... }
  return {
    invoiceId: data.invoice_id || data.id || orderId,
    payUrl: data.pay_url || data.url || null,
    qrBase64: data.qr_base64 || null
  };
}

// === Telegram Bot ===
const bot = new Telegraf(BOT_TOKEN);

const PACKS = [
  { name: '‚≠ê 50', stars: 50 },
  { name: '‚≠ê 100', stars: 100 },
  { name: '‚≠ê 250', stars: 250 },
  { name: '‚≠ê 500', stars: 500 },
];

bot.start(async (ctx) => {
  const kb = Markup.keyboard([['–ö—É–ø–∏—Ç—å —Å–µ–±–µ'], ['–ü–æ–¥–∞—Ä–∏—Ç—å –∑–≤–µ–∑–¥—ã']]).resize();
  await ctx.reply('–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ StarsFabrica. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:', kb);
});

bot.hears('–ö—É–ø–∏—Ç—å —Å–µ–±–µ', async (ctx) => {
  const buttons = PACKS.map(p =>
    [Markup.button.callback(`${p.name} ‚Äî ${calcAmountRub(p.stars)}‚ÇΩ`, `buy:${p.stars}`)]
  );
  await ctx.reply('–í—ã–±–µ—Ä–∏ –ø–∞–∫–µ—Ç:', Markup.inlineKeyboard(buttons));
});

bot.action(/buy:(\d+)/, async (ctx) => {
  try {
    await ctx.answerCbQuery();
    const stars = Number(ctx.match[1]);
    const amount = calcAmountRub(stars);
    const id = uuid();

    // —Å–æ–∑–¥–∞—ë–º –∏–Ω–≤–æ–π—Å –≤ QRManager
    const inv = await createSbpInvoice(id, amount);

    // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑
    insOrder.run({
      id,
      user_id: String(ctx.from.id),
      username: ctx.from.username || '',
      gift_to: '',
      stars,
      amount_rub: amount,
      payment_provider: 'sbp',
      payment_id: inv.invoiceId,
      status: 'pending',
      created_at: now(),
      updated_at: now()
    });

    const payText = [
      `–ó–∞–∫–∞–∑ #${id}`,
      `–ü–∞–∫–µ—Ç: ${stars} ‚≠ê`,
      `–ö –æ–ø–ª–∞—Ç–µ: ${amount} ‚ÇΩ`,
      '',
      inv.payUrl ? `–û–ø–ª–∞—Ç–∏—Ç—å: ${inv.payUrl}` : '–°–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR –¥–ª—è –æ–ø–ª–∞—Ç—ã.',
      '',
      '–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.'
    ].join('\n');

    if (inv.qrBase64) {
      const buf = Buffer.from(inv.qrBase64, 'base64');
      await ctx.replyWithPhoto({ source: buf }, { caption: payText });
    } else {
      await ctx.reply(payText);
    }

    if (ADMIN_CHAT_ID) {
      await bot.telegram.sendMessage(
        ADMIN_CHAT_ID,
        `üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #${id}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${ctx.from.username || ctx.from.id}\n${stars}‚≠ê = ${amount}‚ÇΩ`
      );
    }
  } catch (e) {
    console.error('buy error:', e);
    await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á—ë—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –ø–æ–¥–∞—Ä–∫–∏ (—É–ø—Ä–æ—â—ë–Ω–Ω–æ)
bot.hears('–ü–æ–¥–∞—Ä–∏—Ç—å –∑–≤–µ–∑–¥—ã', async (ctx) => {
  await ctx.reply('–ü–æ–∫–∞ –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏ –ø–æ–¥–∞—Ä–∫–∏ –æ—Ñ–æ—Ä–º–ª—è–µ–º –≤—Ä—É—á–Ω—É—é ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ @–∞–¥–º–∏–Ω—É, –∫–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å üòä');
});

// === Web server ===
const app = express();
app.use(express.json({ limit: '1mb' }));

// health
app.get('/health', (_req, res) => res.status(200).send('ok'));

// --- Webhooks ---
// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π ¬´—á–µ–∫–∞—É—Ç –†–£–ë¬ª
app.post('/webhook/rub', async (req, res) => {
  try {
    if (!signOk(req, WEBHOOK_SECRET_RUB)) return res.status(403).send('forbidden');
    const { orderId, status, txId } = req.body || {};
    if (!orderId) return res.status(400).send('no orderId');

    const order = findById.get(orderId);
    if (!order) return res.status(404).send('not found');

    if (status === 'paid' && order.status !== 'paid' && order.status !== 'delivered') {
      setPaid.run({ id: orderId, tx_id: txId || 'paid', updated_at: now() });
      await notifyPaid(orderId);
    }
    res.json({ ok: true });
  } catch (e) {
    console.error('webhook/rub error', e);
    res.status(500).json({ ok: false });
  }
});

// –ö—Ä–∏–ø—Ç–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å)
app.post('/webhook/crypto', async (req, res) => {
  try {
    if (!signOk(req, WEBHOOK_SECRET_CRYPTO)) return res.status(403).send('forbidden');
    const { orderId, status, txId } = req.body || {};
    if (!orderId) return res.status(400).send('no orderId');

    const order = findById.get(orderId);
    if (!order) return res.status(404).send('not found');

    if (status === 'paid' && order.status !== 'paid' && order.status !== 'delivered') {
      setPaid.run({ id: orderId, tx_id: txId || 'paid', updated_at: now() });
      await notifyPaid(orderId);
    }
    res.json({ ok: true });
  } catch (e) {
    console.error('webhook/crypto error', e);
    res.status(500).json({ ok: false });
  }
});

// Webhook –æ—Ç QRManager (–°–ë–ü)
app.post('/webhook/sbp', async (req, res) => {
  try {
    const { order_id, status, tx_id } = req.body || {};
    if (!order_id) return res.status(400).send('no order_id');

    const order = findById.get(order_id);
    if (!order) return res.status(404).send('not found');

    if (String(status).toLowerCase() === 'paid' && order.status !== 'paid' && order.status !== 'delivered') {
      setPaid.run({ id: order_id, tx_id: tx_id || 'paid', updated_at: now() });
      await notifyPaid(order_id);
    }
    res.json({ ok: true });
  } catch (e) {
    console.error('webhook/sbp error', e);
    res.status(500).json({ ok: false });
  }
});

// === Notify helpers ===
async function notifyPaid(orderId) {
  const o = findById.get(orderId);
  if (!o) return;
  const userId = Number(o.user_id);

  // –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  try {
    await bot.telegram.sendMessage(
      userId,
      `‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞.\n–ó–∞–∫–∞–∑ #${o.id}\n${o.stars}‚≠ê\n–ó–∞–ø—É—Å–∫–∞–µ–º –¥–æ—Å—Ç–∞–≤–∫—É‚Ä¶`
    );
  } catch {}

  // –∞–¥–º–∏–Ω—É
  if (ADMIN_CHAT_ID) {
    try {
      await bot.telegram.sendMessage(
        ADMIN_CHAT_ID,
        `üí≥ –û–ø–ª–∞—á–µ–Ω –∑–∞–∫–∞–∑ #${o.id} (${o.stars}‚≠ê, ${o.amount_rub}‚ÇΩ).`
      );
    } catch {}
  }
}

// === Delivery worker (Fragment) ===
async function processDeliveryOnce() {
  // –±–µ—Ä—ë–º –±–ª–∏–∂–∞–π—à–∏–π –∑–∞–∫–∞–∑ –∫ –¥–æ—Å—Ç–∞–≤–∫–µ
  const order = nextPaidForDelivery.get();
  if (!order) return;

  // –µ—Å–ª–∏ —É–∂–µ –¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è ‚Äî –¥–∞–¥–∏–º –µ—â—ë –ø–æ–ø—ã—Ç–∫—É (<=5)
  try {
    setDelivering.run({ id: order.id, updated_at: now() });

    // –ø–æ–ª—É—á–∞—Ç–µ–ª—å: —Å–≤–æ–π username (–µ—Å–ª–∏ –Ω–µ –ø–æ–¥–∞—Ä–æ–∫)
    const recipient = (order.gift_to && order.gift_to.trim())
      ? order.gift_to.trim().replace(/^@/, '')
      : (order.username || '').replace(/^@/, '');

    if (!recipient) {
      throw new Error('–ü—É—Å—Ç–æ–π –ø–æ–ª—É—á–∞—Ç–µ–ª—å: –Ω–µ—Ç username');
    }

    const result = await deliverViaFragment({
  orderId: order.id,
  stars: Number(order.stars),
  recipient
});
    if (!result || !result.ok) {
      const reason = result?.reason || 'Fragment delivery failed';
      throw new Error(reason);
    }

    // —É—Å–ø–µ—Ö
    setDelivered.run({ id: order.id, tx_id: result.tx || 'fragment', updated_at: now() });

    // –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try {
      await bot.telegram.sendMessage(
        Number(order.user_id),
        `üéâ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ!\n–ó–∞–∫–∞–∑ #${order.id}\n–ù–∞—á–∏—Å–ª–µ–Ω–æ: ${order.stars}‚≠ê\nTX: ${result.tx || 'n/a'}`
      );
    } catch {}

    // –∞–¥–º–∏–Ω—É
    if (ADMIN_CHAT_ID) {
      try {
        await bot.telegram.sendMessage(
          ADMIN_CHAT_ID,
          `üöÄ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: #${order.id} ‚Üí @${recipient} (${order.stars}‚≠ê)\nTX: ${result.tx || 'n/a'}`
        );
      } catch {}
    }
  } catch (e) {
    console.error('delivery error:', e?.message || e);

    const current = findById.get(order.id);
    if (!current) return;

    if (current.retries >= 4) {
      // —Ñ–∞—Ç–∞–ª
      setFailed.run({ id: order.id, updated_at: now() });
      try {
        await bot.telegram.sendMessage(
          Number(current.user_id),
          `‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ #${current.id}. –ú—ã —É–∂–µ —Ä–∞–∑–±–∏—Ä–∞–µ–º—Å—è –∏ –≤–µ—Ä–Ω—ë–º—Å—è —Å —Ä–µ—à–µ–Ω–∏–µ–º.`
        );
      } catch {}
      if (ADMIN_CHAT_ID) {
        await bot.telegram.sendMessage(
          ADMIN_CHAT_ID,
          `‚ùå FAIL –¥–æ—Å—Ç–∞–≤–∫–∞ #${current.id}: ${e.message}`
        ).catch(()=>{});
      }
    } else {
      // –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å 'delivering' —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º retries ‚Äî –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —Ü–∏–∫–ª–µ –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
      if (ADMIN_CHAT_ID) {
        await bot.telegram.sendMessage(
          ADMIN_CHAT_ID,
          `‚ôªÔ∏è –†–µ—Ç—Ä–∞–π –¥–æ—Å—Ç–∞–≤–∫–∏ #${current.id} (${current.retries+1}/5): ${e.message}`
        ).catch(()=>{});
      }
    }
  }
}

// –¶–∏–∫–ª –≤–æ—Ä–∫–µ—Ä–∞
if (AUTODELIVER) {
  setInterval(processDeliveryOnce, 7000);
}

// === Start ===
app.listen(PORT, () => {
  console.log(`HTTP on :${PORT}`);
});
bot.launch().then(() => console.log('Bot launched')).catch(console.error);

// –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
